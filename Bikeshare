# setting up my environment by loading libraries 
install.packages("tidyverse")
## Installing package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.3'
## (as 'lib' is unspecified)
library(tidyverse)
## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
## ✔ dplyr     1.1.4     ✔ readr     2.1.4
## ✔ forcats   1.0.0     ✔ stringr   1.5.0
## ✔ ggplot2   3.5.0     ✔ tibble    3.2.1
## ✔ lubridate 1.9.2     ✔ tidyr     1.3.0
## ✔ purrr     1.0.1     
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()
## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors

# dplyr::filter and dplyr::lag as the default choices

conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")


# STEP 1: COLLECT DATA
#=====================
q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================
# Compare column names each of the files

colnames(q1_2019)
colnames(q1_2020)

# Rename columns  to make them consistent with q1_2020 

(q1_2019 <- rename(q1_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid
                   ,started_at = start_time
                   ,ended_at = end_time
                   ,start_station_name = from_station_name
                   ,start_station_id = from_station_id
                   ,end_station_name = to_station_name
                   ,end_station_id = to_station_id
                   ,member_casual = usertype
                   ))

# Inspect the dataframes and look for incongruencies
str(q1_2019)
str(q1_2020)

# Convert ride_id and rideable_type to character 
q1_2019 <-  mutate(q1_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 

# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q1_2019, q1_2020)

# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender,  "tripduration"))

PREPARATION FOR ANALYSIS
#======================================================
# Inspecting the new table that has been created

str(all_trips
summary(all_trips)  

# few problems to fix:
# (1) In the "member_casual" column, there are two names for members ("member" and "Subscriber") and two names for casual riders ("Customer" and "casual"). We will need to consolidate from four to two labels: both members and subscribers and customer and causal 

# (2) the need to add another column such as day, month, year to aggregate the data at the ride level.

# (3) there is the need to add ride_length because the 2020Q1 does it not “tripduration” column, so we have calculation field for length.

# (4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. We will want to delete these rides.

# In the "member_casual" column, replace "Subscriber" with "member" and "Customer" with "casual" for dataframe consistency with divvy current nomenclature.

# So how many observations fall under each usertype
table(all_trips$member_casual)

# Reassign to the desired values (we will go with the current 2020 labels)

all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))

# Check 
table(all_trips$member_casual)

# Adding columns that list the date, month, day, and year of each ride
all_trips$date <- as.Date(all_trips$started_at)  # yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# Adding a "ride_duration" calculation to all_trips (in seconds)

all_trips$ride_duration <- as.duration(all_trips$started_at %--% all_trips$ended_at)  %>%  as.numeric()

# Inspecting

str(all_trips)

# Convert "ride_duration" from Factor to numeric 

is.factor(all_trips$ride_duration)
all_trips$ride_duration <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_duration)

# Removing "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_duration was negative

# creating a new version of the dataframe (v2) 
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_duration<0),]

#ANALYSIS
N#=====================================
# Descriptive analysis on ride_duration (all figures in seconds)
mean(all_trips_v2$ride_duration) 
median(all_trips_v2$ride_duration) 
max(all_trips_v2$ride_duration) 
min(all_trips_v2$ride_duration) 

#Summary
summary(all_trips_v2$ride_duration)

# Compare members and casual users
aggregate(all_trips_v2$ride_duration ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_duration ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_duration ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_duration ~ all_trips_v2$member_casual, FUN = min)

#average ride time by each day for members vs casual users

aggregate(all_trips_v2$ride_duration ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# The days of the week are out of order. fix.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# check
aggregate(all_trips_v2$ride_duration ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# ridership data by type and weekday

all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							
            ,average_duration = mean(ride_length)) %>% 		
  arrange(member_casual, weekday)		
			
